//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 9/10/2021 12:23:33 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace MicroTechTask
{

    public partial class TestDevModel : DbContext
    {

        public TestDevModel() :
            base()
        {
            OnCreated();
        }

        public TestDevModel(DbContextOptions<TestDevModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=.;Initial Catalog=TestDev;Integrated Security=True;Persist Security Info=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Account> Accounts
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.AccountMapping(modelBuilder);
            this.CustomizeAccountMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Account Mapping

        private void AccountMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>().ToTable(@"Accounts", @"dbo");
            modelBuilder.Entity<Account>().Property(x => x.AccNumber).HasColumnName(@"Acc_Number").HasColumnType(@"nchar(10)").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Account>().Property(x => x.ACCParent).HasColumnName(@"ACC_Parent").HasColumnType(@"nchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Account>().Property(x => x.Balance).HasColumnName(@"Balance").HasColumnType(@"decimal(20,9)").ValueGeneratedNever().HasPrecision(20, 9);
            modelBuilder.Entity<Account>().HasKey(@"AccNumber");
        }

        partial void CustomizeAccountMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>().HasMany(x => x.ChildAccounts).WithOne(op => op.ParentAccount).HasForeignKey(@"ACCParent").IsRequired(false);
            modelBuilder.Entity<Account>().HasOne(x => x.ParentAccount).WithMany(op => op.ChildAccounts).HasForeignKey(@"ACCParent").IsRequired(false);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
